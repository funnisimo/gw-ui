{"version":3,"file":"gw-ui.min.js","sources":["../js/flavor.js","../js/message.js","../js/ui.js","../js/viewport.js"],"sourcesContent":["import * as GWU from 'gw-utils';\nimport * as GWM from 'gw-map';\nGWU.color.install('flavorText', 50, 40, 90);\nGWU.color.install('flavorPrompt', 100, 90, 20);\nexport class Flavor {\n    constructor(opts) {\n        var _a, _b, _c;\n        this.text = '';\n        this.needsUpdate = false;\n        this.isPrompt = false;\n        this.overflow = false;\n        this.ui = opts.ui;\n        this.bounds = new GWU.xy.Bounds(opts.x, opts.y, opts.width, 1);\n        this.fg = GWU.color.from((_a = opts.fg) !== null && _a !== void 0 ? _a : 'flavorText');\n        this.bg = GWU.color.from((_b = opts.bg) !== null && _b !== void 0 ? _b : 'black');\n        this.promptFg = GWU.color.from((_c = opts.promptFg) !== null && _c !== void 0 ? _c : 'flavorPrompt');\n    }\n    setFlavorText(text) {\n        this.text = GWU.text.capitalize(text);\n        this.needsUpdate = true;\n        this.isPrompt = false;\n        this.draw();\n    }\n    clear() {\n        this.text = '';\n        this.needsUpdate = true;\n        this.isPrompt = false;\n        this.draw();\n    }\n    showPrompt(text) {\n        this.text = GWU.text.capitalize(text);\n        this.needsUpdate = true;\n        this.isPrompt = true;\n        this.draw();\n    }\n    draw(force = false) {\n        if (!force && !this.needsUpdate)\n            return false;\n        const buffer = this.ui.buffer;\n        const color = this.isPrompt ? this.fg : this.promptFg;\n        const nextY = buffer.wrapText(this.bounds.x, this.bounds.y, this.bounds.width, this.text, color, this.bg);\n        this.overflow = nextY !== this.bounds.y + 1;\n        this.ui.render();\n        this.needsUpdate = false;\n        return true;\n    }\n    getFlavorText(map, x, y) {\n        const cell = map.cell(x, y);\n        let buf;\n        // let magicItem;\n        // let standsInTerrain;\n        // let subjectMoving;\n        // let prepositionLocked = false;\n        // let subject;\n        // let verb;\n        // let preposition;\n        let object = '';\n        // let adjective;\n        const actor = cell.actor || null;\n        const player = (actor === null || actor === void 0 ? void 0 : actor.isPlayer()) ? actor : null;\n        const theItem = cell.item;\n        const standsInTile = cell.hasTileFlag(GWM.flags.Tile.T_STAND_IN_TILE);\n        if (player && x == player.x && y == player.y) {\n            if (player.hasStatus('levitating')) {\n                buf = GWU.text.apply('you are hovering above §flavor§.', {\n                    actor: player,\n                    flavor: cell.getFlavor(),\n                });\n            }\n            else {\n                // if (theItem) {\n                // \tbuf = ITEM.getFlavor(theItem);\n                // }\n                // else {\n                buf = GWU.text.apply('you see yourself.', { actor });\n                // }\n            }\n            return buf;\n        }\n        //\n        // // detecting magical items\n        // magicItem = null;\n        // if (theItem && !playerCanSeeOrSense(x, y)\n        // \t&& GW.item.isDetected(theItem))\n        // {\n        // \tmagicItem = theItem;\n        // } else if (monst && !playerCanSeeOrSense(x, y)\n        // \t\t   && monst.carriedItem\n        // \t\t   && GW.item.isDetected(monst.carriedItem))\n        // {\n        // \tmagicItem = monst.carriedItem;\n        // }\n        // if (magicItem) {\n        // \treturn GW.item.detectedText(magicItem);\n        // }\n        //\n        // // telepathy\n        // if (monst\n        //       && !(cell.flags & VISIBLE) \t\t\t\t\t // && !GW.player.canSeeMonster(monst)\n        // \t\t\t&& (cell.flags & TELEPATHIC_VISIBLE)) // GW.actor.telepathicallyRevealed(monst))\n        // {\n        // \treturn GW.actor.telepathyText(monst);\n        // }\n        //\n        // if (monst && !playerCanSeeOrSense(x, y)) {\n        //       // Monster is not visible.\n        // \tmonst = null;\n        // }\n        if (!map.fov.isAnyKindOfVisible(x, y)) {\n            buf = '';\n            if (map.fov.isRevealed(x, y)) {\n                // memory\n                const cellInfo = map.cellInfo(x, y, true);\n                if (cellInfo.item) {\n                    // if (player.status.hallucinating && !GW.GAME.playbackOmniscience) {\n                    //     object = GW.item.describeHallucinatedItem();\n                    // } else {\n                    object = cellInfo.item.getName({\n                        color: false,\n                        article: true,\n                    });\n                    // object = GW.item.describeItemBasedOnParameters(cell.rememberedItemCategory, cell.rememberedItemKind, cell.rememberedItemQuantity);\n                    // }\n                }\n                else if (cellInfo.actor) {\n                    object = cellInfo.actor.getName({\n                        color: false,\n                        article: true,\n                    });\n                }\n                else {\n                    object = cellInfo.tile.getFlavor();\n                }\n                buf = GWU.text.apply('you remember seeing §object§ here.', {\n                    actor,\n                    object,\n                });\n            }\n            else if (map.fov.isMagicMapped(x, y)) {\n                // magic mapped\n                const cellInfo = map.cellInfo(x, y, true);\n                buf = GWU.text.apply('you expect §text§ to be here.', {\n                    actor,\n                    text: cellInfo.tile.getFlavor(),\n                });\n            }\n            return buf;\n        }\n        let needObjectArticle = false;\n        if (actor) {\n            object =\n                actor.getName({ color: false, article: true }) + ' standing';\n            needObjectArticle = true;\n        }\n        else if (theItem) {\n            object = theItem.getName({ color: false, article: true });\n            needObjectArticle = true;\n        }\n        let article = standsInTile ? ' in ' : ' on ';\n        const groundTile = cell.depthTile(GWM.flags.Depth.GROUND) || GWM.tile.tiles.NULL;\n        const surfaceTile = cell.depthTile(GWM.flags.Depth.SURFACE);\n        const liquidTile = cell.depthTile(GWM.flags.Depth.LIQUID);\n        // const gasTile = cell.depthTile(GWM.flags.Depth.GAS);\n        let surface = '';\n        if (surfaceTile) {\n            const tile = surfaceTile;\n            if (needObjectArticle) {\n                needObjectArticle = false;\n                object += ' on ';\n            }\n            if (tile.hasTileFlag(GWM.flags.Tile.T_BRIDGE)) {\n                article = ' over ';\n            }\n            surface = surfaceTile.getFlavor() + article;\n        }\n        let liquid = '';\n        if (liquidTile) {\n            liquid = liquidTile.getFlavor() + ' covering ';\n            if (needObjectArticle) {\n                needObjectArticle = false;\n                object += ' in ';\n            }\n        }\n        if (needObjectArticle) {\n            needObjectArticle = false;\n            object += ' on ';\n        }\n        let ground = groundTile.getFlavor({ article: true });\n        buf = GWU.text.apply('you §action§ §text§.', {\n            actor,\n            action: map.isVisible(x, y) ? 'see' : 'sense',\n            text: object + surface + liquid + ground,\n        });\n        return buf;\n    }\n}\n","import * as GWU from 'gw-utils';\nexport class Messages {\n    constructor(opts) {\n        const buffer = opts.ui.buffer;\n        this.bounds = new GWU.xy.Bounds(opts.x, opts.y, Math.min(opts.width || buffer.width, buffer.width - opts.x), Math.min(opts.height || buffer.height, buffer.height - opts.y));\n        this.cache = new GWU.message.MessageCache({\n            width: this.bounds.width,\n            length: buffer.height,\n        });\n        this.ui = opts.ui;\n        this.bg = GWU.color.from(opts.bg || 'black');\n        this.fg = GWU.color.from(opts.fg || 'white');\n    }\n    contains(x, y) {\n        return this.bounds.contains(x, y);\n    }\n    get needsUpdate() {\n        return this.cache.needsUpdate;\n    }\n    get buffer() {\n        return this.ui.buffer;\n    }\n    draw(force = false) {\n        if (!force && !this.cache.needsUpdate)\n            return false;\n        let messageColor;\n        const tempColor = GWU.color.make();\n        const isOnTop = this.bounds.y < 10;\n        // black out the message area\n        this.buffer.fillRect(this.bounds.x, this.bounds.y, this.bounds.width, this.bounds.height, ' ', 0, this.bg);\n        this.cache.forEach((msg, confirmed, i) => {\n            if (i >= this.bounds.height)\n                return;\n            messageColor = tempColor;\n            messageColor.copy(this.fg);\n            if (confirmed) {\n                messageColor.mix(this.bg, 50);\n                messageColor.mix(this.bg, (75 * i) / (2 * this.bounds.height));\n            }\n            const localY = isOnTop ? this.bounds.height - i - 1 : i;\n            const y = this.toBufferY(localY);\n            GWU.text.eachChar(msg, (c, color, _bg, j) => {\n                const x = this.toBufferX(j);\n                if (color && messageColor !== color && confirmed) {\n                    color.mix(this.bg, 50);\n                    color.mix(this.bg, (75 * i) / (2 * this.bounds.height));\n                }\n                messageColor = color || tempColor;\n                this.buffer.draw(x, y, c, messageColor, this.bg);\n            });\n            // for (let j = GWU.text.length(msg); j < this.bounds.width; j++) {\n            //     const x = this.toBufferX(j);\n            //     this.buffer.draw(x, y, ' ', this.bg, this.bg);\n            // }\n        });\n        this.cache.needsUpdate = false;\n        return true;\n    }\n    toBufferY(y) {\n        return this.bounds.y + y;\n    }\n    toBufferX(x) {\n        return this.bounds.x + x;\n    }\n    async showArchive() {\n        let reverse, fadePercent, currentMessageCount = 0;\n        let fastForward;\n        // Count the number of lines in the archive.\n        let totalMessageCount = 0;\n        this.cache.forEach(() => ++totalMessageCount);\n        if (totalMessageCount <= this.bounds.height)\n            return;\n        const isOnTop = this.bounds.y < 10;\n        const dbuf = this.ui.startDialog();\n        // Pull-down/pull-up animation:\n        for (reverse = 0; reverse <= 1; reverse++) {\n            fastForward = false;\n            for (currentMessageCount = reverse\n                ? totalMessageCount\n                : this.bounds.height; reverse\n                ? currentMessageCount >= this.bounds.height\n                : currentMessageCount <= totalMessageCount; currentMessageCount += reverse ? -1 : 1) {\n                this.ui.resetDialogBuffer(dbuf);\n                // Print the message archive text to the dbuf.\n                this.cache.forEach((msg, _confirmed, j) => {\n                    if (j >= currentMessageCount || j >= dbuf.height)\n                        return;\n                    const y = isOnTop ? j : dbuf.height - j - 1;\n                    fadePercent = Math.floor((50 * (currentMessageCount - j)) / currentMessageCount);\n                    const fg = this.fg.clone().mix(this.bg, fadePercent);\n                    dbuf.wrapText(this.toBufferX(0), y, this.bounds.width, msg, fg, this.bg);\n                });\n                dbuf.render();\n                if (!fastForward &&\n                    (await this.ui.loop.pause(reverse ? 15 : 45))) {\n                    fastForward = true;\n                    // dequeueEvent();\n                    currentMessageCount = reverse\n                        ? this.bounds.height + 1\n                        : totalMessageCount - 1; // skip to the end\n                }\n            }\n            if (!reverse) {\n                const y = isOnTop ? 0 : dbuf.height - 1;\n                const x = this.bounds.x > 8\n                    ? this.bounds.x - 8 // to left of box\n                    : Math.min(this.bounds.x + this.bounds.width, // just to right of box\n                    this.buffer.width - 8 // But definitely on the screen - overwrite some text if necessary\n                    );\n                dbuf.wrapText(x, y, 8, '--DONE--', this.bg, this.fg);\n                dbuf.render();\n                await this.ui.loop.waitForAck();\n            }\n        }\n        this.ui.finishDialog();\n        this.cache.confirmAll();\n        this.cache.needsUpdate = true;\n    }\n}\n","import * as GWU from 'gw-utils';\nexport class UI {\n    constructor(opts = {}) {\n        this.layers = [];\n        this.freeBuffers = [];\n        this.inDialog = false;\n        if (!opts.canvas)\n            throw new Error('Need a canvas.');\n        this.canvas = opts.canvas;\n        this.buffer = opts.canvas.buffer;\n        this.loop = opts.loop || GWU.loop;\n    }\n    render() {\n        this.buffer.render();\n    }\n    startDialog() {\n        this.inDialog = true;\n        const base = this.buffer || this.canvas.buffer;\n        this.layers.push(base);\n        this.buffer =\n            this.freeBuffers.pop() || new GWU.canvas.Buffer(this.canvas);\n        // UI_OVERLAY._data.forEach( (c) => c.opacity = 0 );\n        this.buffer.copy(base);\n        return this.buffer;\n    }\n    resetDialogBuffer(dest) {\n        const base = this.layers[this.layers.length - 1] || this.canvas.buffer;\n        dest.copy(base);\n    }\n    finishDialog() {\n        if (!this.inDialog)\n            return;\n        if (this.buffer !== this.canvas.buffer) {\n            this.freeBuffers.push(this.buffer);\n        }\n        this.buffer = this.layers.pop() || this.canvas.buffer;\n        this.buffer.render();\n        this.inDialog = this.layers.length > 0;\n    }\n}\n","import * as GWU from 'gw-utils';\nexport class Viewport {\n    constructor(opts) {\n        this.follow = false;\n        this.snap = false;\n        this.filter = null;\n        this.offsetX = 0;\n        this.offsetY = 0;\n        this.lockX = false;\n        this.lockY = false;\n        this.ui = opts.ui;\n        this.follow = opts.follow || false;\n        this.snap = opts.snap || false;\n        this.bounds = new GWU.xy.Bounds(opts.x, opts.y, opts.width, opts.height);\n        this.filter = opts.filter || null;\n        if (opts.lock) {\n            this.lockX = true;\n            this.lockY = true;\n        }\n        else {\n            if (opts.lockX) {\n                this.lockX = true;\n            }\n            if (opts.lockY) {\n                this.lockY = true;\n            }\n        }\n    }\n    toMapX(x) {\n        return x + this.offsetX - this.bounds.x;\n    }\n    toMapY(y) {\n        return y + this.offsetY - this.bounds.y;\n    }\n    toInnerX(x) {\n        return x - this.bounds.x;\n    }\n    toInnerY(y) {\n        return y - this.bounds.y;\n    }\n    contains(x, y) {\n        return this.bounds.contains(x, y);\n    }\n    halfWidth() {\n        return Math.floor(this.bounds.width / 2);\n    }\n    halfHeight() {\n        return Math.floor(this.bounds.height / 2);\n    }\n    draw(map, playerX, playerY) {\n        if (!map)\n            return false;\n        // if (!map.hasMapFlag(GWM.flags.Map.MAP_CHANGED)) return false;\n        if (this.follow && playerX !== undefined && playerY !== undefined) {\n            this.offsetX = playerX - this.halfWidth();\n            this.offsetY = playerY - this.halfHeight();\n        }\n        else if (this.snap &&\n            playerX !== undefined &&\n            playerY !== undefined) {\n            const left = this.offsetX;\n            const right = this.offsetX + this.bounds.width;\n            const top = this.offsetY;\n            const bottom = this.offsetY + this.bounds.height;\n            const edgeX = Math.floor(this.bounds.width / 5);\n            const edgeY = Math.floor(this.bounds.height / 5);\n            const thirdW = Math.floor(this.bounds.width / 3);\n            if (left + edgeX >= playerX) {\n                this.offsetX = Math.max(0, playerX + thirdW - this.bounds.width);\n            }\n            else if (right - edgeX <= playerX) {\n                this.offsetX = Math.min(playerX - thirdW, map.width - this.bounds.width);\n            }\n            const thirdH = Math.floor(this.bounds.height / 3);\n            if (top + edgeY >= playerY) {\n                this.offsetY = Math.max(0, playerY + thirdH - this.bounds.height);\n            }\n            else if (bottom - edgeY <= playerY) {\n                this.offsetY = Math.min(playerY - thirdH, map.height - this.bounds.height);\n            }\n        }\n        else if (playerX !== undefined && playerY !== undefined) {\n            this.offsetX = playerX;\n            this.offsetY = playerY;\n        }\n        if (this.lockX) {\n            this.offsetX = GWU.clamp(this.offsetX, 0, map.width - this.bounds.width);\n        }\n        if (this.lockY) {\n            this.offsetY = GWU.clamp(this.offsetY, 0, map.height - this.bounds.height);\n        }\n        const mixer = new GWU.sprite.Mixer();\n        for (let x = 0; x < this.bounds.width; ++x) {\n            for (let y = 0; y < this.bounds.height; ++y) {\n                const mapX = x + this.offsetX;\n                const mapY = y + this.offsetY;\n                if (map.hasXY(mapX, mapY)) {\n                    map.getAppearanceAt(mapX, mapY, mixer);\n                }\n                else {\n                    mixer.blackOut();\n                }\n                if (this.filter) {\n                    this.filter(mixer, mapX, mapY, map);\n                }\n                this.ui.buffer.drawSprite(x + this.bounds.x, y + this.bounds.y, mixer);\n            }\n        }\n        // map.clearMapFlag(GWM.flags.Map.MAP_CHANGED);\n        return true;\n    }\n}\n"],"names":["color","install","constructor","opts","_a","_b","_c","this","text","needsUpdate","isPrompt","overflow","ui","bounds","GWU","xy","Bounds","x","y","width","fg","from","bg","promptFg","setFlavorText","capitalize","draw","clear","showPrompt","force","buffer","nextY","wrapText","render","getFlavorText","map","cell","buf","object","actor","player","isPlayer","theItem","item","standsInTile","hasTileFlag","GWM","flags","Tile","T_STAND_IN_TILE","hasStatus","apply","flavor","getFlavor","fov","isAnyKindOfVisible","isRevealed","cellInfo","getName","article","tile","isMagicMapped","needObjectArticle","groundTile","depthTile","Depth","GROUND","tiles","NULL","surfaceTile","SURFACE","liquidTile","LIQUID","surface","T_BRIDGE","liquid","ground","action","isVisible","Math","min","height","cache","message","MessageCache","length","contains","messageColor","tempColor","make","isOnTop","fillRect","forEach","msg","confirmed","i","copy","mix","localY","toBufferY","eachChar","c","_bg","j","toBufferX","async","reverse","fadePercent","fastForward","currentMessageCount","totalMessageCount","dbuf","startDialog","resetDialogBuffer","_confirmed","floor","clone","loop","pause","waitForAck","finishDialog","confirmAll","layers","freeBuffers","inDialog","canvas","Error","base","push","pop","Buffer","dest","follow","snap","filter","offsetX","offsetY","lockX","lockY","lock","toMapX","toMapY","toInnerX","toInnerY","halfWidth","halfHeight","playerX","playerY","undefined","left","right","top","bottom","edgeX","edgeY","thirdW","max","thirdH","clamp","mixer","sprite","Mixer","mapX","mapY","hasXY","getAppearanceAt","blackOut","drawSprite"],"mappings":"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"}